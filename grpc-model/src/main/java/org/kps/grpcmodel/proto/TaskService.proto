syntax = "proto3";
package org.kps.grpc;
//билдим проект, после чего получаем классы в generated для наследования

message NewsBaseRequest {
  int64  id = 1;
  optional  string name = 2;
  optional int32  pageCount = 3 ;
  optional Rating rating = 4;
  optional Author author = 5;
}

message NewsInputRequest{
  string name = 1;
  optional int32  pageCount = 2 ;
  optional Rating rating = 3;
  optional Author author = 4;
}

message NewsSelectByNameRequest{
  string name = 1;
}

message Empty{
}

message NewsResponse{
  int64  id = 1;
  optional string name = 2;
  optional int32  pageCount = 3 ;
  optional Rating rating = 4;
  optional int64 authorId = 5;
}

message FindAllNewsResponse{
  repeated NewsResponse summary = 6;
}

enum Rating {
  ONE_STAR = 0;
  TWO_STAR = 1;
  THREE_STAR = 2;
  FOUR_STAR = 3;
  FIVE_STAR = 4;
}

message Author {
  int64 id = 1;
  optional string firstName = 2;
  optional string  lastName = 3;
}

message AuthorRequest {
  int64 id = 1;
}

message AuthorIdsRequest{
  repeated int64 id = 1;
}
message AuthorListResponse{
  repeated Author author = 1;
}
service NewsService{
  rpc findNewsByName(NewsSelectByNameRequest) returns (NewsResponse);
  // add paging here
  rpc findAll(Empty) returns (FindAllNewsResponse);

  rpc addNews(NewsInputRequest) returns (NewsResponse);
  rpc updateNews(NewsBaseRequest) returns (NewsResponse);
  rpc deleteNewsById(NewsSelectByNameRequest) returns (NewsResponse);
}

service AuthorService{
  rpc findAuthor(AuthorRequest) returns (Author);
  rpc findAuthors(AuthorIdsRequest) returns (AuthorListResponse);
}
