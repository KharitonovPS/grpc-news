type Query {
    newsByName(name: String!): News
    findAll: [News]!
    authorById(id: ID): Author
    news(first:Int, after:String, last:Int, before:String): NewsConnection

}

type Mutation {
    addNews(newsInput: NewsInput!): News!
    updateNews(id: ID, newsInput: NewsInput) : News
    delete(id: ID): News
}

input NewsInput {
    name: String!
    pageCount: Int
    rating: Rating
    authorId: ID!
}

type News {
    id: ID
    name: String
    pageCount: Int
    rating: Rating
    author: Author
}

type Author {
    id: ID
    firstName: String
    lastName: String
}

enum Rating {
    FIVE_STAR
    FOUR_STAR
    THREE_STAR
    TWO_STAR
    ONE_STAR
}

#paging можно скипнуть с помощью ConnectionTypeDefinitionConfigurer
type NewsConnection {
    edges: [NewsEdge]!
    pageInfo: PageInfo!
}

type NewsEdge {
    node: News!
    cursor: String!
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}


